// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.xeniac.warrantyrostermanager.mainactivity.editwarrantyfragment;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.Utils;
import com.xeniac.warrantyrostermanager.CustomType;

import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class EditWarrantyInput implements InputType {
    private final Input<String> title;

    private final Input<String> description;

    private final Input<String> serial_number;

    private final Input<String> brand;

    private final Input<String> model;

    private final Input<Object> starting_date;

    private final Input<Object> expiry_date;

    private final Input<String> category_id;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    EditWarrantyInput(Input<String> title, Input<String> description, Input<String> serial_number,
                      Input<String> brand, Input<String> model, Input<Object> starting_date,
                      Input<Object> expiry_date, Input<String> category_id) {
        this.title = title;
        this.description = description;
        this.serial_number = serial_number;
        this.brand = brand;
        this.model = model;
        this.starting_date = starting_date;
        this.expiry_date = expiry_date;
        this.category_id = category_id;
    }

    public @Nullable
    String title() {
        return this.title.value;
    }

    public @Nullable
    String description() {
        return this.description.value;
    }

    public @Nullable
    String serial_number() {
        return this.serial_number.value;
    }

    public @Nullable
    String brand() {
        return this.brand.value;
    }

    public @Nullable
    String model() {
        return this.model.value;
    }

    public @Nullable
    Object starting_date() {
        return this.starting_date.value;
    }

    public @Nullable
    Object expiry_date() {
        return this.expiry_date.value;
    }

    public @Nullable
    String category_id() {
        return this.category_id.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public InputFieldMarshaller marshaller() {
        return new InputFieldMarshaller() {
            @Override
            public void marshal(InputFieldWriter writer) throws IOException {
                if (title.defined) {
                    writer.writeString("title", title.value);
                }
                if (description.defined) {
                    writer.writeString("description", description.value);
                }
                if (serial_number.defined) {
                    writer.writeString("serial_number", serial_number.value);
                }
                if (brand.defined) {
                    writer.writeString("brand", brand.value);
                }
                if (model.defined) {
                    writer.writeString("model", model.value);
                }
                if (starting_date.defined) {
                    writer.writeCustom("starting_date", CustomType.DATE, starting_date.value != null ? starting_date.value : null);
                }
                if (expiry_date.defined) {
                    writer.writeCustom("expiry_date", CustomType.DATE, expiry_date.value != null ? expiry_date.value : null);
                }
                if (category_id.defined) {
                    writer.writeCustom("category_id", CustomType.ID, category_id.value != null ? category_id.value : null);
                }
            }
        };
    }

    @Override
    public int hashCode() {
        if (!$hashCodeMemoized) {
            int h = 1;
            h *= 1000003;
            h ^= title.hashCode();
            h *= 1000003;
            h ^= description.hashCode();
            h *= 1000003;
            h ^= serial_number.hashCode();
            h *= 1000003;
            h ^= brand.hashCode();
            h *= 1000003;
            h ^= model.hashCode();
            h *= 1000003;
            h ^= starting_date.hashCode();
            h *= 1000003;
            h ^= expiry_date.hashCode();
            h *= 1000003;
            h ^= category_id.hashCode();
            $hashCode = h;
            $hashCodeMemoized = true;
        }
        return $hashCode;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o instanceof EditWarrantyInput) {
            EditWarrantyInput that = (EditWarrantyInput) o;
            return this.title.equals(that.title)
                    && this.description.equals(that.description)
                    && this.serial_number.equals(that.serial_number)
                    && this.brand.equals(that.brand)
                    && this.model.equals(that.model)
                    && this.starting_date.equals(that.starting_date)
                    && this.expiry_date.equals(that.expiry_date)
                    && this.category_id.equals(that.category_id);
        }
        return false;
    }

    public static final class Builder {
        private Input<String> title = Input.absent();

        private Input<String> description = Input.absent();

        private Input<String> serial_number = Input.absent();

        private Input<String> brand = Input.absent();

        private Input<String> model = Input.absent();

        private Input<Object> starting_date = Input.absent();

        private Input<Object> expiry_date = Input.absent();

        private Input<String> category_id = Input.absent();

        Builder() {
        }

        public Builder title(@Nullable String title) {
            this.title = Input.fromNullable(title);
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.fromNullable(description);
            return this;
        }

        public Builder serial_number(@Nullable String serial_number) {
            this.serial_number = Input.fromNullable(serial_number);
            return this;
        }

        public Builder brand(@Nullable String brand) {
            this.brand = Input.fromNullable(brand);
            return this;
        }

        public Builder model(@Nullable String model) {
            this.model = Input.fromNullable(model);
            return this;
        }

        public Builder starting_date(@Nullable Object starting_date) {
            this.starting_date = Input.fromNullable(starting_date);
            return this;
        }

        public Builder expiry_date(@Nullable Object expiry_date) {
            this.expiry_date = Input.fromNullable(expiry_date);
            return this;
        }

        public Builder category_id(@Nullable String category_id) {
            this.category_id = Input.fromNullable(category_id);
            return this;
        }

        public Builder titleInput(@NotNull Input<String> title) {
            this.title = Utils.checkNotNull(title, "title == null");
            return this;
        }

        public Builder descriptionInput(@NotNull Input<String> description) {
            this.description = Utils.checkNotNull(description, "description == null");
            return this;
        }

        public Builder serial_numberInput(@NotNull Input<String> serial_number) {
            this.serial_number = Utils.checkNotNull(serial_number, "serial_number == null");
            return this;
        }

        public Builder brandInput(@NotNull Input<String> brand) {
            this.brand = Utils.checkNotNull(brand, "brand == null");
            return this;
        }

        public Builder modelInput(@NotNull Input<String> model) {
            this.model = Utils.checkNotNull(model, "model == null");
            return this;
        }

        public Builder starting_dateInput(@NotNull Input<Object> starting_date) {
            this.starting_date = Utils.checkNotNull(starting_date, "starting_date == null");
            return this;
        }

        public Builder expiry_dateInput(@NotNull Input<Object> expiry_date) {
            this.expiry_date = Utils.checkNotNull(expiry_date, "expiry_date == null");
            return this;
        }

        public Builder category_idInput(@NotNull Input<String> category_id) {
            this.category_id = Utils.checkNotNull(category_id, "category_id == null");
            return this;
        }

        public EditWarrantyInput build() {
            return new EditWarrantyInput(title, description, serial_number, brand, model, starting_date, expiry_date, category_id);
        }
    }
}